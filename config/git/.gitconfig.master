[user]
	name = AUTHORNAME
	email = AUTHOREMAIL

[credential]
	helper = GIT_CREDENTIAL_HELPER

[alias]
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Verbose commit shows diff inside commit message
	c = commit -v

	# Commit all changes
	ca = !git add -A && git commit -av

	# Clone a repository including all submodules
	cl = clone --recursive

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Open all merge conflicts in default editor
	fix = "!f() { ${EDITOR} `git diff --name-only`; }; f"

	# Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

	# Pretty log
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

	# `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
	# `git gc`: cleanup unnecessary files and optimize the local repository
	trim = !git remote prune origin && git gc
	# `git clean -df`: remove untracked files and directories from the working tree
	# `git stash clear`: remove all stashed states
	cleanup = !git clean -df && git stash clear

	# Undo last commit
	undo = !git reset --soft HEAD^

	# Show the diff of everything you haven't pushed yet
	unpushed = !git diff origin/$(git rev-parse --abbrev-ref HEAD)..HEAD

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = nowarn

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore.global
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,trailing-space

	# Use VS Code for commit messages
	editor = code --wait

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
	interactive = auto
	showbranch = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red bold # deletions
	new = green bold # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[branch]
	autosetupmerge = true
	# configure git to always add '--rebase' to git pull, to maintain nicer history
	# read more at http://gitready.com/advanced/2009/02/11/pull-with-rebase.html
	# you can override this with '--no-rebase' switch
	autosetuprebase = always

[commit]
	# custom commit message template
	template = ~/.gitmessage

[diff]
	# Detect copies as well as renames
	renames = copies

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# Only push to the current branch
	default = current

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

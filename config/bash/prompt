# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://imgur.com/CiXGoha
# Heavily inspired by @necolasâ€™s prompt: https://github.com/necolas/dotfiles
# iTerm â†’ Profiles â†’ Text â†’ use 13pt Monaco with 1.1 vertical spacing.

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

prompt_battery () {
	if [ "$(uname -s)" == "Darwin" ]; then
		local battery=$(ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%.2f%%"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}')
		local charging=$(ioreg -n AppleSmartBattery -r | awk '$1~/ExternalConnected/{gsub("Yes", "+");gsub("No", " "); print substr($0, length, 2)}')
		# âš¡ðŸ”‹
		echo "$charging $base2$battery"
	fi
	return
}

tput sgr0 # reset colors
bold=$(tput bold)
reset=$(tput sgr0)
black=$(tput setaf 0)
white=$(tput setaf 15)
# Solarized colors, taken from http://git.io/solarized-colors
base03=$(tput setaf 234)
base02=$(tput setaf 235)
base01=$(tput setaf 240)
base00=$(tput setaf 241)
base0=$(tput setaf 244)
base1=$(tput setaf 245)
base2=$(tput setaf 254)
base3=$(tput setaf 230)
yellow=$(tput setaf 136)
orange=$(tput setaf 166)
red=$(tput setaf 160)
magenta=$(tput setaf 125)
violet=$(tput setaf 61)
blue=$(tput setaf 33)
cyan=$(tput setaf 37)
green=$(tput setaf 64)

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="\[${bold}${red}\]";
else
	userStyle="\[${orange}\]";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="\[${bold}${red}\]";
else
	hostStyle="\[${yellow}\]";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${base01}\]@";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${base01}\]: ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${violet} - \")"; # Git repository details
#PS1+="\[${base01}\] ";
#PS1+="\$(prompt_battery)"; # Battery
PS1+="\n";
PS1+="\[${base01}\][\T] " # time
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]â†’ \[${reset}\]";
export PS2;